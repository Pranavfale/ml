import numpy as np

class HebbianNetwork:
    def __init__(self, num_inputs):
        self.num_inputs = num_inputs
        self.weights = np.zeros(num_inputs)

    def train(self, inputs, learning_rate=0.1):
        for x in inputs:
            # Update weights using Hebbian learning rule
            self.weights += learning_rate * x * x

    def predict(self, inputs):
        # Compute output as the dot product of inputs and weights
        output = np.dot(inputs, self.weights)
        return output

# Example usage
if __name__ == "__main__":
    # Create a Hebbian network with 3 input neurons
    hebbian_net = HebbianNetwork(num_inputs=3)

    # Example input data for training
    input_data = np.array([[1, 0, 1],
                           [0, 1, 0],
                           [1, 1, 1]])

    # Train the network
    hebbian_net.train(input_data)

    # Test the network with new inputs
    test_input = np.array([1, 0, 0])  # New input
    predicted_output = hebbian_net.predict(test_input)
    print("Predicted output:", predicted_output)
